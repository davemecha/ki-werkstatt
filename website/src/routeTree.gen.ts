/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PresentationsIndexRouteImport } from './routes/presentations/index'
import { Route as PosterIndexRouteImport } from './routes/poster/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PresentationsIndexRoute = PresentationsIndexRouteImport.update({
  id: '/presentations/',
  path: '/presentations/',
  getParentRoute: () => rootRouteImport,
} as any)
const PosterIndexRoute = PosterIndexRouteImport.update({
  id: '/poster/',
  path: '/poster/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/poster': typeof PosterIndexRoute
  '/presentations': typeof PresentationsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/poster': typeof PosterIndexRoute
  '/presentations': typeof PresentationsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/poster/': typeof PosterIndexRoute
  '/presentations/': typeof PresentationsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/poster' | '/presentations'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/poster' | '/presentations'
  id: '__root__' | '/' | '/poster/' | '/presentations/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PosterIndexRoute: typeof PosterIndexRoute
  PresentationsIndexRoute: typeof PresentationsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/presentations/': {
      id: '/presentations/'
      path: '/presentations'
      fullPath: '/presentations'
      preLoaderRoute: typeof PresentationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/poster/': {
      id: '/poster/'
      path: '/poster'
      fullPath: '/poster'
      preLoaderRoute: typeof PosterIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PosterIndexRoute: PosterIndexRoute,
  PresentationsIndexRoute: PresentationsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
